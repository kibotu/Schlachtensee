ext {
    VERSION_NAME = simpleReleaseVersionName()
    VERSION_CODE = commitCount()
    CANONICAL_VERSION_NAME = canonicalReleaseVersionName()
    BRANCH_NAME = branchName()
    COMMIT_HASH = commitHash()
    isLocal = project.rootProject.file('local.properties').exists()
    isTesting = false
    BUILD_TIME = new Date().getTime()
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.getkeepsafe.dexcount'
apply plugin: 'realm-android'

androidExtensions {
    experimental = true
}

kapt {
    useBuildCache = true
}

android {

    compileSdkVersion compileSdkVer
    buildToolsVersion buildToolsVer

    defaultConfig {
        applicationId APPLICATION_ID
        multiDexEnabled true

        minSdkVersion minSdkVer
        targetSdkVersion targetSdkVer
        versionCode VERSION_CODE
        versionName VERSION_NAME
        vectorDrawables.useSupportLibrary = true

        buildConfigField "String", "CANONICAL_VERSION_NAME", escape(CANONICAL_VERSION_NAME)
        buildConfigField "String", "COMMIT_HASH", escape(COMMIT_HASH)
        buildConfigField "String", "BRANCH", escape(BRANCH_NAME)
        buildConfigField "String", "BUILD_DATE", escape(BUILD_TIME)
        buildConfigField "String", "VSC", escape(VSC_PATH)
        buildConfigField "boolean", "IS_LOCAL", escape(isLocal)
        buildConfigField "boolean", "IS_CI", escape(isCi)
        buildConfigField "boolean", "TESTING", escape(isTesting)

        resConfigs "de"
        manifestPlaceholders += [
                crashlyticsEnabled: false
        ]
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    // region build types

    buildTypes {

        debug {
            applicationIdSuffix ""
            pseudoLocalesEnabled true
            debuggable true
            minifyEnabled false
            crunchPngs false
            shrinkResources false
            zipAlignEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            ext.alwaysUpdateBuildId = false
        }

        release {
            pseudoLocalesEnabled false
            debuggable false
            minifyEnabled true
            crunchPngs true
            shrinkResources true
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    // endregion

    // region lint options

    lintOptions {
        disable 'InvalidPackage'
        abortOnError false        // true by default
        checkAllWarnings false
        checkReleaseBuilds false
        ignoreWarnings true       // false by default
        quiet true                // false by default
    }

    // endregion

    // region dex options

    dexOptions {
        javaMaxHeapSize "4g"
        maxProcessCount 8
    }

    // endregion

    // region adb options

    adbOptions {
        timeOutInMs 10 * 60 * 1000 // 10 minutes
    }

    // endregion

    // region exclude duplicated meta inf files

    packagingOptions {
        exclude 'META-INF/library-core_release.kotlin_module'
        exclude 'META-INF/lib_release.kotlin_module'
    }

    // endregion
}

dependencies {

    debugImplementation libs.leakcanaryDebug
    debugImplementation libs.leakcanaryDebugSupportFragments
    releaseImplementation libs.leakcanaryRelease

    implementation libs.supportMultidex

    implementation libs.kotlinJdk8
    implementation libs.kotlinxCoroutinesCore
    implementation libs.kotlinxCoroutinesAndroid

    implementation libs.supportAppCompat
    implementation libs.appCompatResources
    implementation libs.androidKtxCore
    implementation libs.activityKtx
    implementation libs.fragmentKtx
    implementation libs.supportDesign
    implementation libs.constraintLayout2
    implementation libs.supportRecyclerview
    implementation libs.supportAnnotations
    implementation libs.supportVectorDrawable
    implementation libs.androidKtxPalette

    // viewmodel and lifecycle
    implementation libs.lifecycleExtensions
    implementation libs.lifecycleViewmodel
    implementation libs.lifecycleLivedata
    kapt libs.lifecycleCompiler
    implementation libs.lifecycleRuntime
    implementation libs.lifecycleRuntimeKtx
    implementation libs.lifecycleLivedataKtx
    implementation libs.androidKtxLifecycleViewmodel

    implementation libs.koinAndroidxScope
    implementation libs.koinAndroidxViewmodel

    implementation libs.androidKtxCollection

    implementation libs.androidKtxNavigationCommon
    implementation libs.androidKtxNavigationFragment
    implementation libs.androidKtxNavigationUi
    implementation libs.androidKtxNavigationRuntime

    implementation libs.playServicesAuth
    implementation libs.firebaseCore
    implementation libs.firebaseCrash
    implementation(libs.crashlytics) { transitive = true }
    implementation libs.firebaseMessaging
    implementation libs.playServicesLocation
    implementation libs.playServicesMaps
    implementation libs.playServicesMapsUtils

    // pagination
    implementation libs.pagingRuntimeKtx

    implementation libs.gson

    implementation libs.rx2java
    implementation libs.rx2Android
    implementation libs.rx2Kotlin
    implementation libs.retrofit
    implementation libs.retrofitConverterGson
    implementation libs.converterSimpleXml
    implementation libs.okhttp3
    implementation libs.okhttp3LoggingInterceptor
    implementation libs.okhttp3ResponseEcho

    implementation libs.secureStorage
    implementation libs.rxpermissions

    implementation libs.exozetCore
    implementation libs.logger
    implementation libs.deviceInfo
    implementation libs.recyclerViewPresenter4
    implementation libs.recyclerviewAnimators
    implementation libs.processPhoenix

    implementation libs.catLoading

    implementation libs.lottie

    implementation libs.glide
    kapt libs.glideAnnotationsProcessor
}

// region override support library version

configurations.all {

    resolutionStrategy.cacheDynamicVersionsFor 10, 'minutes'

    // required for gradle uninstallAll
    resolutionStrategy.force androidTestLibs.findBugs
    resolutionStrategy.force androidTestLibs.checkerCompatQual
    resolutionStrategy.force androidTestLibs.checkerQual
    resolutionStrategy.force androidTestLibs.errorProneAnnotations
    resolutionStrategy.force androidTestLibs.guavaListenablefuture
}

// endregion

static def escape(Object value) {
    return "\"$value\""
}

static def escape(boolean value) {
    return "$value"
}

task copyReadme(type: Copy) {
    from "${project.rootDir}/README.md"
    into "${project.rootDir}/app/src/main/assets"
}

task('generateChangelogTask') {
    doLast {
        generateChangelog()
    }
}

preBuild.dependsOn generateChangelogTask
preBuild.dependsOn copyReadme

//apply plugin: 'com.google.gms.google-services'